'''
Функция для случайной генерации ДНК последовательности выбраной длины

на ввод получает целое число  - требуемая длина, на вывод - строка из случайно сгенеррированых символов agtc
'''

#то что в прошлой версии:
import random
dna_symbol = "atgc" #перечень допустимых символов для ДНК

def random_seq ():
	rand_seq = ""
	seq_template = ""
	size = random.randint(100,1000) #здесь сама фугкция рандомно генерирует длину ДНК, сейчас не нужно
	if seq_var.get() == 0: # эти условия для окноного вида, сейчас не нужны
		seq_template = dna_symbol #выбираем что ДНК символы
	if seq_var.get() == 1:
		seq_template = protein_symbol #для генерации белковой последовательности, сейчас не нужно
	rand_seq = rand_seq.join(random.choice (seq_template) for _ in range (size)) #проходимся по циклу и добавляем случайный из 4-х символов на каждом шаге
	return rand_seq

'''
форматирование введенной последовательности: 
1. найти не atgc символы, сообщить что они найдены
2. если есть вывести какой символ и его позицию в лог
3. если нет - вернуть в лог последовательность

в прошлой версии не atcg удалялись из последовательности
'''

#прошлая версия
def format_seq (seq):
	seq = seq.lower()
	seq_list = list (seq) #перевод строки в список
	counter = 0  #счетчик произведеных замен
	seq_format = [] #список для отформатированой строки с удаленными символами
	if seq_var.get() == 0: #условие для окноного вывода, не нужно
		for sybmol in seq_list: #посимвольное сравнение элемента исходной строки(переведнной зачем то в список) и добавление в новый если допустимый
			if sybmol in list(dna_symbol):
				seq_format.append (sybmol)
			else:
				counter +=1
	if seq_var.get() == 1: #тоже самое для белковой последвоательности, не нужно
		for sybmol in seq_list:
			if sybmol in list(protein_symbol):
				seq_format.append (sybmol)
			else:
				counter +=1
	#окно-сообщение если найден неподходящий символ			
	if counter >2: # 2 потому что знак переноса строки всегда учитывается - не знаю как с ним справиться
			messagebox.showwarning("Warning!", "{} unavailable symbols were deleted".format(counter) )
	if counter == 2:
			messagebox.showwarning ("Warning!", " One unavailable symbol was deleted")
	return "".join(seq_format)

'''
Далее работа с повтроами - на ввод список и длина повторяющегося элемента
на вывод - список словарей. Каждый найденый повтро -словарь где указаны тип повтрояющегося элемента, начало, конец, количество повтрояющихся членов
полная длина повтора 

в предыдущей версии это было реализовано через 7 функций

сначчала вся последовательность "дробилась" на список где каждый элемент - кусок исходной посдледовательности равной заданой длине повтрояющегося элемента


'''



